n = int(input())
m = int(input())

matrix = [[input() for _ in range(m)] for _ in range(n)]
    
for i in range(n):
    print(*matrix[i])
print()
for j in range(m):
    for i in range(n):
        print(matrix[i][j], end=" ")
    print()

#вычисление следа матрицы

n = int(input())

matrix = [input().split() for _ in range(n)]

s = 0
for i in range(n):
    s += int(matrix[i][i])

print(s)

# вычисление количества элементов в строке матрицы, которые больше среднего арифметического

n = int(input())

matrix = [input().split() for _ in range(n)]

count = 0
row_sum = 0
row_med = 0

for i in range(n):
    for j in range(n):
        row_sum += int(matrix[i][j])
    row_med = row_sum / n
    for j in range(n):
        if int(matrix[i][j]) > row_med:
            count += 1
    print(count)
    count = 0
    row_sum = 0
    row_med = 0

# создание матрицы

matrix = [list(map(int, input().split())) for i in range(int(input()))]


# вычисление максимального значения в области
n = int(input())

matrix = [input().split() for _ in range(n)]

max = -1000

for i in range(n):
    for j in range(n):
        if i >= j and int(matrix[i][j]) > max:
            max = int(matrix[i][j])
            
print(max)

n = int(input())

matrix = [list(map(int, input().split())) for i in range(n)]
max = -1000

for i in range(n):
    for j in range(n):
        if ((i >= j and i <= (n - 1 - j)) or (i <= j and i >= (n - 1 - j))) and matrix[i][j] > max:
            max = matrix[i][j]
            
print(max)

n = int(input())

matrix = [list(map(int, input().split())) for i in range(n)]

q_1 = 0
q_2 = 0
q_3 = 0
q_4 = 0

for i in range(n):
    for j in range(n):
        if i > j and i < (n - 1 - j):
            q_1 += matrix[i][j]
        if i > j and i > (n - 1 - j):
            q_2 += matrix[i][j]
        if i < j and i > (n - 1 - j):
            q_3 += matrix[i][j]
        if i < j and i < (n - 1 - j):
            q_4 += matrix[i][j]
            
print(f'Верхняя четверть: {q_4}')
print(f'Правая четверть: {q_3}')
print(f'Нижняя четверть: {q_2}')
print(f'Левая четверть: {q_1}')

# создание таблицы умножения
n = int(input())
m = int(input())

mult = [[0]*m for _ in range(n)]

for i in range(n):
    for j in range(m):
        mult[i][j] = i * j
        
for i in range(n):
    for j in range(m):
        print(str(mult[i][j]).ljust(3), end=" ")
    print()

#найти максимум в таблице
n = int(input())
m = int(input())

matrix = [list(map(int, input().split())) for i in range(n)]

n_max = -100
i_max = 0
j_max = 0
for i in range(n):
    for j in range(m):
        if matrix[i][j] > n_max:
            n_max = matrix[i][j]
            i_max = i
            j_max = j
            
print(i_max, j_max)

#поменять местами столбцы в матрице

n = int(input())
m = int(input())

matrix = [list(map(int, input().split())) for _ in range(n)]
matrix_new = [[0]*m for _ in range(n)]

c1, c2 = input().split()

for i in range(n):
    for j in range(m):
        if j == int(c1):
            matrix_new[i][j] = matrix[i][int(c2)]
        elif j == int(c2):
            matrix_new[i][j] = matrix[i][int(c1)]
        else:
            matrix_new[i][j] = matrix[i][j]
            
for i in range(n):
    for j in range(m):
        print(matrix_new[i][j], end=" ")
    print()

# альтернативное решение

n, m = int(input()), int(input())
matrix = [list(map(int, input().split())) for i in range(n)]
c1, c2 = (map(int, input().split()))
for k in matrix:
    k[c1], k[c2] = k[c2], k[c1]
    print(*k)

# проверка является ли матрица симметричной

n = int(input())

matrix = [list(map(int, input().split())) for _ in range(n)]

result = 'YES'
for i in range(n):
    for j in range(n):
        if matrix[i][j] != matrix [j][i]:
            result = 'NO'
print(result)

#поменять местами основную и побочную диагональ матрицы
n = int(input())

matrix = [list(map(int, input().split())) for _ in range(n)]

for i in range(n):
    for j in range(n):
        if i == j:
            matrix[i][i], matrix[n - i - 1][i] = matrix[n - i - 1][i], matrix[i][i]
            
for i in range(n):
    for j in range(n):
        print(matrix[i][j], end=" ")
    print()

# зеркальное отображение матрицы по горизонтальной оси
n = int(input())

matrix = [list(map(int, input().split())) for _ in range(n)]

for i in range(n-1,-1,-1):
    for j in range(n):
        print(matrix[i][j], end=" ")
    print()

#повернуть матрицу на 90 градусов
n = int(input())

matrix = [list(map(int, input().split())) for _ in range(n)]

for i in range(n):
    for j in range(n-1, -1, -1):
        print(matrix[j][i], end=" ")
    print()

# вывести символы в шахматном порядке

n, m = map(int, input().split())

matrix = [['.']*m for _ in range(n)]

for i in range(n):
    for j in range(m):
        if (i + j) % 2 == 0:
            matrix[i][j] = '.'
        else:
            matrix[i][j] = '*'
            
for i in range(n):
    print(*matrix[i], end = " ")
    print()

# Заполнение матрицы значениями по побочной диагонали и ниже побочной диагонали
n = int(input())

matrix = [[0]*n for _ in range(n)]

for i in range(n):
    for j in range(n):
        if i == n - 1 - j:
            matrix[i][j] = 1
        if (i >= j and i > n - 1 - j) or (i <= j and i > n - 1 - j):
            matrix[i][j] = 2

for i in range(n):
    print(*matrix[i], end=" ")
    print()

# заполнение матрицы числами по порядку
n, m = map(int, input().split())

matrix = [[0]*m for _ in range(n) ]

for i in range(n):
    for j in range(m):
        matrix[i][j] = j + 1 + i*m

for i in range(n):
    for j in range(m):
        print(str(matrix[i][j]).ljust(3), end=" ")
    print()

n, m = map(int, input().split())

matrix = [[0]*m for _ in range(n)]

for i in range(n):
    for j in range(m):
        matrix[i][j] = n * j + 1 + i
        
for i in range(n):
    for j in range(m):
        print(str(matrix[i][j]).ljust(3), end=" ")
    print()

#заполнение матрицы по спирали:
n, m = map(int, input().split())

matrix = [[0]*m for _ in range(n)]

c = 0
x = 1
list_test = []

for k in range(int(round((n+1)/2, 0))):

    for i in range(c, m - c - 1):
        if matrix[c][i] == 0:
            matrix[c][i] = x
            x += 1
    for i in range(c, n - c - 1):
        if matrix[i][m - c - 1] == 0:
            matrix[i][m - c - 1] = x
            x += 1
    for i in range(m - c - 1, 0, -1):
        if matrix[n - c - 1][i] == 0:
            matrix[n - c - 1][i] = x
            x += 1
    for i in range(0, n - c*2 - 1):
        if matrix[n - c - 1 - i][c] == 0:
            matrix[n - c - 1 - i][c] = x
            x += 1
    if matrix[int(round(n/2, 0)) - 1][int(round(m/2, 0)) - 1] == 0:
        c += 1

for i in range(n):
    for j in range(m):
        print(str(matrix[i][j]).ljust(3), end=" ")
    print()   
